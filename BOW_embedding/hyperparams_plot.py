#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Sun Jan 14 22:02:41 2018

@author: ivan
"""
import numpy as np 

result=[{(20, 0.2): 0.90473115, (20, 0.25): 0.90903223, (20, 0.3): 0.91462362, (20, 0.35): 0.91999996, (20, 0.4): 0.92021501, (20, 0.45): 0.92451608, (20, 0.5): 0.9253763, (25, 0.2): 0.90688169, (25, 0.25): 0.91591394, (25, 0.3): 0.91483867, (25, 0.35): 0.91268814, (25, 0.4): 0.93032253, (25, 0.45): 0.91419351, (25, 0.5): 0.9286021, (30, 0.2): 0.90473115, (30, 0.25): 0.91784942, (30, 0.3): 0.93161285, (30, 0.35): 0.92473114, (30, 0.4): 0.91634405, (30, 0.45): 0.91720426, (30, 0.5): 0.93634403, (35, 0.2): 0.9193548, (35, 0.25): 0.91247308, (35, 0.3): 0.90989244, (35, 0.35): 0.92559135, (35, 0.4): 0.92688167, (35, 0.45): 0.92279565, (35, 0.5): 0.92881715, (40, 0.2): 0.91247308, (40, 0.25): 0.92881715, (40, 0.3): 0.93225801, (40, 0.35): 0.93354833, (40, 0.4): 0.92946231, (40, 0.45): 0.92924726, (40, 0.5): 0.93311822, (45, 0.2): 0.9258064, (45, 0.25): 0.93010747, (45, 0.3): 0.91505373, (45, 0.35): 0.92623651, (45, 0.4): 0.92903221, (45, 0.45): 0.92236555, (45, 0.5): 0.92559135, (50, 0.2): 0.92838705, (50, 0.25): 0.93333328, (50, 0.3): 0.93892467, (50, 0.35): 0.92709672, (50, 0.4): 0.92709672, (50, 0.45): 0.93397844, (50, 0.5): 0.93397844}, {(20, 0.2): 0.90494621, (20, 0.25): 0.91075265, (20, 0.3): 0.93053758, (20, 0.35): 0.92516124, (20, 0.4): 0.90881717, (20, 0.45): 0.92838705, (20, 0.5): 0.91827953, (25, 0.2): 0.91268814, (25, 0.25): 0.92408597, (25, 0.3): 0.92494619, (25, 0.35): 0.92064512, (25, 0.4): 0.93161285, (25, 0.45): 0.92881715, (25, 0.5): 0.93419349, (30, 0.2): 0.92236555, (30, 0.25): 0.92602146, (30, 0.3): 0.91462362, (30, 0.35): 0.92365587, (30, 0.4): 0.91698921, (30, 0.45): 0.92602146, (30, 0.5): 0.92881715, (35, 0.2): 0.92408597, (35, 0.25): 0.92043006, (35, 0.3): 0.92666662, (35, 0.35): 0.93010747, (35, 0.4): 0.93247306, (35, 0.45): 0.92365587, (35, 0.5): 0.93397844, (40, 0.2): 0.9193548, (40, 0.25): 0.92666662, (40, 0.3): 0.92688167, (40, 0.35): 0.9253763, (40, 0.4): 0.93290317, (40, 0.45): 0.9313978, (40, 0.5): 0.93032253, (45, 0.2): 0.9225806, (45, 0.25): 0.9313978, (45, 0.3): 0.92967737, (45, 0.35): 0.93247306, (45, 0.4): 0.92903221, (45, 0.45): 0.93333328, (45, 0.5): 0.92473114, (50, 0.2): 0.91827953, (50, 0.25): 0.93247306, (50, 0.3): 0.92172039, (50, 0.35): 0.91806448, (50, 0.4): 0.93225801, (50, 0.45): 0.9286021, (50, 0.5): 0.92129028}, {(20, 0.2): 0.92043006, (20, 0.25): 0.90021503, (20, 0.3): 0.91956985, (20, 0.35): 0.91720426, (20, 0.4): 0.92731178, (20, 0.45): 0.92752683, (20, 0.5): 0.91892469, (25, 0.2): 0.91440856, (25, 0.25): 0.92021501, (25, 0.3): 0.92731178, (25, 0.35): 0.90903223, (25, 0.4): 0.92559135, (25, 0.45): 0.92903221, (25, 0.5): 0.92774189, (30, 0.2): 0.90709674, (30, 0.25): 0.9253763, (30, 0.3): 0.93032253, (30, 0.35): 0.92279565, (30, 0.4): 0.9346236, (30, 0.45): 0.9318279, (30, 0.5): 0.91505373, (35, 0.2): 0.92752683, (35, 0.25): 0.9286021, (35, 0.3): 0.92967737, (35, 0.35): 0.92666662, (35, 0.4): 0.92107522, (35, 0.45): 0.92903221, (35, 0.5): 0.92752683, (40, 0.2): 0.92172039, (40, 0.25): 0.92236555, (40, 0.3): 0.92881715, (40, 0.35): 0.91741931, (40, 0.4): 0.92322576, (40, 0.45): 0.92688167, (40, 0.5): 0.92903221, (45, 0.2): 0.92215049, (45, 0.25): 0.93311822, (45, 0.3): 0.92193544, (45, 0.35): 0.9318279, (45, 0.4): 0.92688167, (45, 0.45): 0.93419349, (45, 0.5): 0.92731178, (50, 0.2): 0.92086017, (50, 0.25): 0.91806448, (50, 0.3): 0.92365587, (50, 0.35): 0.94043005, (50, 0.4): 0.93311822, (50, 0.45): 0.92989242, (50, 0.5): 0.92881715}, {(20, 0.2): 0.91720426, (20, 0.25): 0.91612899, (20, 0.3): 0.91763437, (20, 0.35): 0.91956985, (20, 0.4): 0.92172039, (20, 0.45): 0.91569889, (20, 0.5): 0.92774189, (25, 0.2): 0.91569889, (25, 0.25): 0.92236555, (25, 0.3): 0.91784942, (25, 0.35): 0.91806448, (25, 0.4): 0.9225806, (25, 0.45): 0.92107522, (25, 0.5): 0.92967737, (30, 0.2): 0.91548383, (30, 0.25): 0.9133333, (30, 0.3): 0.91677415, (30, 0.35): 0.92043006, (30, 0.4): 0.92946231, (30, 0.45): 0.93096769, (30, 0.5): 0.92688167, (35, 0.2): 0.92924726, (35, 0.25): 0.9286021, (35, 0.3): 0.92602146, (35, 0.35): 0.92301071, (35, 0.4): 0.93354833, (35, 0.45): 0.92666662, (35, 0.5): 0.93053758, (40, 0.2): 0.92602146, (40, 0.25): 0.92666662, (40, 0.3): 0.92172039, (40, 0.35): 0.92107522, (40, 0.4): 0.9318279, (40, 0.45): 0.93161285, (40, 0.5): 0.93333328, (45, 0.2): 0.92021501, (45, 0.25): 0.92193544, (45, 0.3): 0.9197849, (45, 0.35): 0.9253763, (45, 0.4): 0.92645156, (45, 0.45): 0.92709672, (45, 0.5): 0.92559135, (50, 0.2): 0.93204296, (50, 0.25): 0.92838705, (50, 0.3): 0.92236555, (50, 0.35): 0.92473114, (50, 0.4): 0.92946231, (50, 0.45): 0.93333328, (50, 0.5): 0.93075264}, {(20, 0.2): 0.92043006, (20, 0.25): 0.9225806, (20, 0.3): 0.91290319, (20, 0.35): 0.92215049, (20, 0.4): 0.91763437, (20, 0.45): 0.91612899, (20, 0.5): 0.91247308, (25, 0.2): 0.90752685, (25, 0.25): 0.91849458, (25, 0.3): 0.92043006, (25, 0.35): 0.91634405, (25, 0.4): 0.92731178, (25, 0.45): 0.92946231, (25, 0.5): 0.9165591, (30, 0.2): 0.93118274, (30, 0.25): 0.92473114, (30, 0.3): 0.91999996, (30, 0.35): 0.92494619, (30, 0.4): 0.92666662, (30, 0.45): 0.92129028, (30, 0.5): 0.92451608, (35, 0.2): 0.9318279, (35, 0.25): 0.92494619, (35, 0.3): 0.92043006, (35, 0.35): 0.91698921, (35, 0.4): 0.92645156, (35, 0.45): 0.93225801, (35, 0.5): 0.93591392, (40, 0.2): 0.92301071, (40, 0.25): 0.92731178, (40, 0.3): 0.93225801, (40, 0.35): 0.92408597, (40, 0.4): 0.93075264, (40, 0.45): 0.92602146, (40, 0.5): 0.93032253, (45, 0.2): 0.92946231, (45, 0.25): 0.92817199, (45, 0.3): 0.92967737, (45, 0.35): 0.93827951, (45, 0.4): 0.92817199, (45, 0.45): 0.92731178, (45, 0.5): 0.9258064, (50, 0.2): 0.93075264, (50, 0.25): 0.92602146, (50, 0.3): 0.92430103, (50, 0.35): 0.93032253, (50, 0.4): 0.92494619, (50, 0.45): 0.93376338, (50, 0.5): 0.93419349}]

#for i in range(5):
#    print(max(result[i].values()))
#    for key in result[i]:
#        if result[i][key]==max(result[i].values()):
#            print(key)
            
#find best value for num_hidden overall
avg_acc_num_hidden={}
for num_hidden in range(20,55,5):
    acc_list=[]
    for res in result:
         for params in res:
             if params[0]==num_hidden:
                 acc_list.append(res[params])
    avg_acc_num_hidden[num_hidden]=np.mean(acc_list)
print(avg_acc_num_hidden)

avg_acc_dropout={}
for dropout in [.05*j for j in range(4,11)]:
    dropout=round(dropout,2)
    acc_list=[]
    for res in result:
         for params in res:
             if params[1]==dropout:
                 acc_list.append(res[params])
    avg_acc_dropout[dropout]=np.mean(acc_list)
print(avg_acc_dropout)